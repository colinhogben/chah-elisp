;;-----------------------------------------------------------------------
;;	Preferences for C code
;;-----------------------------------------------------------------------
;;;###autoload
(defun chah-c-style ()
  (setq comment-column 40)
  (make-local-variable 'indent-tabs-mode)
  (setq indent-tabs-mode t)			; Buffer-local
  (make-local-variable 'comment-line-start)
  (setq comment-line-start "/*--- ")
  (make-local-variable 'comment-line-start-skip)
  (setq comment-line-start-skip "/\\*-* *")
  (cond
   ((or (string-match "/micropython" (buffer-file-name)))
    (progn
      (setq c-basic-offset 4)
      (setq indent-tabs-mode nil)))))

(define-key c-mode-map "\M-;" 'c-indent-for-comment)
(define-key c-mode-map "\C-ci" 'c-insert-if)
(define-key c-mode-map "\C-cf" 'c-insert-for)
(define-key c-mode-map "\C-cw" 'c-insert?-while)
(define-key c-mode-map "\C-cs" 'c-insert-switch)
(define-key c-mode-map "\C-cc" 'c-insert-case)
(define-key c-mode-map "\C-c#" 'c-insert-cpp-if)
(define-key c-mode-map [just] 'c-fill-paragraph)
(define-key c-mode-map "" 'newline-and-indent)

(defun c-insert-if ()
  "Insert an if{}else{} clause."
  (interactive "*")
  (open-line 1)
  (c-indent-command)
  (insert "if (")
  (let ((test (point)))
    (insert ") {")
    (newline)
    (c-indent-command)
    (newline)
    (insert "}else{")
    (c-indent-command)
    (newline)
    (c-indent-command)
    (newline)
    (insert "}")
    (c-indent-command)
    (goto-char test)))

(defun c-insert-for ()
  "Insert a for(){} clause."
  (interactive "*")
  (open-line 1)
  (c-indent-command)
  (insert "for (")
  (let ((test (point)))
    (insert ") {")
    (newline)
    (c-indent-command)
    (newline)
    (insert "}")
    (c-indent-command)
    (goto-char test)))

(defun c-insert-switch ()
  "Insert a switch(){} clause."
  (interactive "*")
  (open-line 1)
  (c-indent-command)
  (insert "switch (")
  (let ((test (point)))
    (insert ") {")
    (newline)
    (c-indent-command)
    (newline)
    (insert "default:")
    (c-indent-command)
    (newline)
    (insert "}")
    (c-indent-command)
    (goto-char test)))

(defun c-insert-case ()
  "Insert a case clause."
  (interactive "*")
  (insert "case :")
  (c-indent-command)
  (let ((val (1- (point))))
    (newline)
    (c-indent-command)
    (newline)
    (insert "break;")
    (c-indent-command)
    (goto-char val)))

(defun c-insert-while ()
  "Insert a while{} clause."
  (interactive "*")
  (open-line 1)
  (c-indent-command)
  (insert "while (")
  (let ((test (point)))
    (insert ") {")
    (newline)
    (c-indent-command)
    (newline)
    (insert "}")
    (c-indent-command)
    (goto-char test)))

(defun c-insert-cpp-if (condition)
  "Insert a #if CONDITION #else #endif clause."
  (interactive "*s#if condition: ")
  (open-line 1)
  (insert "#if " condition)
  (c-indent-command)
  (newline)
  (c-indent-command)
  (let ((test (point))
	(inv (if (string-match "^!" condition)
		 (substring condition 1)
	       (concat "!" condition))))
    (newline)
    (insert "#else /* " inv " */")
    (c-indent-command)
    (newline)
    (c-indent-command)
    (newline)
    (insert "#endif /* " inv " */")
    (c-indent-command)
    (goto-char test)))

(defun c-indent-for-comment ()
  "Indent this line's comment or insert an empty comment.
If there is nothing currently on the line, indent as for a command."
  (interactive "*")
  (beginning-of-line 1)
  (if (save-excursion (skip-chars-forward " \t") (not (eolp)))
      (indent-for-comment)
    (c-indent-line)
    (insert (or comment-line-start comment-start
		(error "No comment syntax defined")))
    (save-excursion (insert comment-end))))

(defun text-to-c (start end)
  "Convert text in region to C printf statements."
  (interactive "r")
  (save-restriction
    (narrow-to-region start end)
    (goto-char (point-min))
    (while (search-forward "\"" nil t)		; Quote quotes
      (replace-match "\\\"" nil t))
    (goto-char (point-min))
    (insert "printf(\"")
    (end-of-line)
    (insert "\\n\"")
    (forward-line 1)
    (while (< (point) (point-max))
      (insert "       \"")
      (end-of-line)
      (insert "\\n\"")
      (forward-line 1))
    (backward-char)
    (insert ");")))

(defun c-to-text (start end)
  "Convert printf statements produced by text-to-c back text."
  (interactive "r")
  (save-restriction
    (narrow-to-region start end)
    (goto-char start)
    (while (re-search-forward "^  [^\"]*\"" nil t)
      (replace-match "" nil t))
    (goto-char start)
    (while (re-search-forward "\\\\n\"\\();\\)?" nil t)
      (replace-match "" nil t))
    (goto-char start)
    (while (search-forward "\\\"" nil t)
      (replace-match "\"" nil t))))
